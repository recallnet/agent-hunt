generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Defines the possible skills for an agent
enum Skill {
  TRADING
  RESEARCH
  AUTOMATION
  OTHER
}

model User {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  address       String         @unique
  agents        Agent[]        // A user can have many agents
  upvotes       Upvote[]
  duplicateFlags DuplicateFlag[]
  spamFlags     SpamFlag[]
}

model Agent {
  id               Int            @id @default(autoincrement())
  createdAt        DateTime       @default(now())
  name             String
  avatarUrl        String
  url              String
  description      String
  whyHunt          String
  skill            Skill
  otherSkillDetail String?
  author           User           @relation(fields: [authorId], references: [id])
  authorId         Int
  upvotes          Upvote[]
  duplicateFlags   DuplicateFlag[]
  spamFlags        SpamFlag[]
}

model Upvote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId   Int
  @@unique([userId, agentId]) // Ensure one upvote per user per agent
}

model DuplicateFlag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId   Int
  @@unique([userId, agentId]) // Ensure one duplicate flag per user per agent
}

model SpamFlag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId   Int
  @@unique([userId, agentId]) // Ensure one spam flag per user per agent
}