// datasource and generator blocks
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Skill {
  CRYPTO_TRADING
  FINANCE
  SOCIAL
  PRODUCTIVITY
  PREDICTIONS
  ASSISTANT
  MARKETING
  RESEARCH
  GAMING
  HEALTH
  ECOMMERCE
  CUSTOMER_SERVICE
  OTHER
}

model User {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  address        String          @unique
  agents         Agent[]
  upvotes        Upvote[]
  duplicateFlags DuplicateFlag[]
  spamFlags      SpamFlag[]
}

model Agent {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  name             String
  avatarUrl        String
  url              String
  description      String
  whyHunt          String
  skill            Skill
  otherSkillDetail String?
  authorId         Int
  author           User            @relation(fields: [authorId], references: [id])
  upvotes          Upvote[]
  duplicateFlags   DuplicateFlag[]
  spamFlags        SpamFlag[]
}

model Upvote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  reason    String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  agentId   Int
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([userId, agentId])
  @@index([userId, agentId]) // Optimizes queries for a specific user's actions
  @@index([agentId])         // Optimizes queries for all actions on an agent
}

model DuplicateFlag {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  duplicateAgentUrl String
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  agentId           Int
  agent             Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([userId, agentId])
  @@index([userId, agentId]) // Optimizes queries for a specific user's actions
  @@index([agentId])         // Optimizes queries for all actions on an agent
}

model SpamFlag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  reason    String?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  agentId   Int
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([userId, agentId])
  @@index([userId, agentId]) // Optimizes queries for a specific user's actions
  @@index([agentId])         // Optimizes queries for all actions on an agent
}